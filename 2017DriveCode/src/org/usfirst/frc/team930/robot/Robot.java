package org.usfirst.frc.team930.robot;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;
import com.ctre.CANTalon.TrajectoryPoint;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
	Joystick stick = new Joystick(1);
	
	//AHRS gyro = new AHRS(SerialPort.Port.kUSB);
	
	// Real FPID values
	/*
	 * Left:
	 * F = 0.945
	 * P = 0.4
	 * I = 0.00035
	 * 
	 * Right:
	 * F = 0.945
	 * P = 0.4
	 * I = 0.00035
	 */
	
	CANTalon L1 = new CANTalon(1);		// Right F: 0.945
	CANTalon L2 = new CANTalon(2);		// Right P: 0.4
	CANTalon L3 = new CANTalon(3);		// Right I: 0.00035
	CANTalon R1 = new CANTalon(4);
	CANTalon R2 = new CANTalon(5);		// Left F: 1
	CANTalon R3 = new CANTalon(6);		// Left P: 0.1
										// Left I: 0.0012
	Spark intakeMotor = new Spark(1);
	boolean motorOn = false;
	
	public static final int kNumPoints =370;		
	// Position (rotations)	Velocity (RPM)	Duration (ms)
	public static double [][]Points = new double[][]{		
	{0,	0	,10},
	{9.52380952380952E-06,	0.114285714	,10},
	{4.28571428571429E-05,	0.285714286	,10},
	{0.00010952380952381,	0.514285714	,10},
	{0.000219047619047619,	0.8	,10},
	{0.000380952380952381,	1.142857143	,10},
	{0.000604761904761905,	1.542857143	,10},
	{0.0009,	2	,10},
	{0.00127619047619048,	2.514285714	,10},
	{0.00174285714285714,	3.085714286	,10},
	{0.00230952380952381,	3.714285714	,10},
	{0.00298571428571429,	4.4	,10},
	{0.00378095238095238,	5.142857143	,10},
	{0.00470476190476191,	5.942857143	,10},
	{0.00576666666666667,	6.8	,10},
	{0.00697619047619048,	7.714285714	,10},
	{0.00834285714285714,	8.685714286	,10},
	{0.00987619047619048,	9.714285714	,10},
	{0.0115857142857143,	10.8	,10},
	{0.0134809523809524,	11.94285714	,10},
	{0.0155714285714286,	13.14285714	,10},
	{0.0178619047619048,	14.34285714	,10},
	{0.020352380952381,	15.54285714	,10},
	{0.0230428571428571,	16.74285714	,10},
	{0.0259333333333333,	17.94285714	,10},
	{0.0290238095238095,	19.14285714	,10},
	{0.0323142857142857,	20.34285714	,10},
	{0.0358047619047619,	21.54285714	,10},
	{0.0394952380952381,	22.74285714	,10},
	{0.0433857142857143,	23.94285714	,10},
	{0.0474761904761905,	25.14285714	,10},
	{0.0517666666666667,	26.34285714	,10},
	{0.0562571428571429,	27.54285714	,10},
	{0.0609476190476191,	28.74285714	,10},
	{0.0658380952380953,	29.94285714	,10},
	{0.0709285714285714,	31.14285714	,10},
	{0.0762190476190476,	32.34285714	,10},
	{0.0817095238095238,	33.54285714	,10},
	{0.0874,	34.74285714	,10},
	{0.0932904761904762,	35.94285714	,10},
	{0.0993809523809524,	37.14285714	,10},
	{0.105671428571429,	38.34285714	,10},
	{0.112161904761905,	39.54285714	,10},
	{0.118852380952381,	40.74285714	,10},
	{0.125742857142857,	41.94285714	,10},
	{0.132833333333333,	43.14285714	,10},
	{0.14012380952381,	44.34285714	,10},
	{0.147614285714286,	45.54285714	,10},
	{0.155304761904762,	46.74285714	,10},
	{0.163195238095238,	47.94285714	,10},
	{0.171285714285714,	49.14285714	,10},
	{0.179576190476191,	50.34285714	,10},
	{0.188066666666667,	51.54285714	,10},
	{0.196757142857143,	52.74285714	,10},
	{0.205647619047619,	53.94285714	,10},
	{0.214738095238095,	55.14285714	,10},
	{0.224028571428572,	56.34285714	,10},
	{0.233519047619048,	57.54285714	,10},
	{0.243209523809524,	58.74285714	,10},
	{0.2531,	59.94285714	,10},
	{0.263190476190476,	61.14285714	,10},
	{0.273480952380952,	62.34285714	,10},
	{0.283971428571429,	63.54285714	,10},
	{0.294661904761905,	64.74285714	,10},
	{0.305552380952381,	65.94285714	,10},
	{0.316642857142857,	67.14285714	,10},
	{0.327933333333333,	68.34285714	,10},
	{0.33942380952381,	69.54285714	,10},
	{0.351114285714286,	70.74285714	,10},
	{0.363004761904762,	71.94285714	,10},
	{0.375095238095238,	73.14285714	,10},
	{0.387385714285714,	74.34285714	,10},
	{0.399876190476191,	75.54285714	,10},
	{0.412566666666667,	76.74285714	,10},
	{0.425457142857143,	77.94285714	,10},
	{0.438547619047619,	79.14285714	,10},
	{0.451838095238095,	80.34285714	,10},
	{0.465328571428572,	81.54285714	,10},
	{0.479019047619048,	82.74285714	,10},
	{0.492909523809524,	83.94285714	,10},
	{0.507,	85.14285714	,10},
	{0.521290476190476,	86.34285714	,10},
	{0.535780952380953,	87.54285714	,10},
	{0.550471428571429,	88.74285714	,10},
	{0.565361904761905,	89.94285714	,10},
	{0.580452380952381,	91.14285714	,10},
	{0.595742857142857,	92.34285714	,10},
	{0.611233333333334,	93.54285714	,10},
	{0.62692380952381,	94.74285714	,10},
	{0.642814285714286,	95.94285714	,10},
	{0.658904761904762,	97.14285714	,10},
	{0.675195238095238,	98.34285714	,10},
	{0.691685714285714,	99.54285714	,10},
	{0.708376190476191,	100.7428571	,10},
	{0.725266666666667,	101.9428571	,10},
	{0.742357142857143,	103.1428571	,10},
	{0.759647619047619,	104.3428571	,10},
	{0.777138095238096,	105.5428571	,10},
	{0.794828571428572,	106.7428571	,10},
	{0.812719047619048,	107.9428571	,10},
	{0.830809523809524,	109.1428571	,10},
	{0.849090476190477,	110.2285714	,10},
	{0.867547619047619,	111.2571429	,10},
	{0.886171428571429,	112.2285714	,10},
	{0.904952380952381,	113.1428571	,10},
	{0.923880952380953,	114	,10},
	{0.942947619047619,	114.8	,10},
	{0.962142857142857,	115.5428571	,10},
	{0.981457142857143,	116.2285714	,10},
	{1.00088095238095,	116.8571429	,10},
	{1.02040476190476,	117.4285714	,10},
	{1.04001904761905,	117.9428571	,10},
	{1.05971428571429,	118.4	,10},
	{1.07948095238095,	118.8	,10},
	{1.09930952380952,	119.1428571	,10},
	{1.11919047619048,	119.4285714	,10},
	{1.13911428571429,	119.6571429	,10},
	{1.15907142857143,	119.8285714	,10},
	{1.17905238095238,	119.9428571	,10},
	{1.19904761904762,	120	,10},
	{1.21904761904762,	120	,10},
	{1.23904761904762,	120	,10},
	{1.25904761904762,	120	,10},
	{1.27904761904762,	120	,10},
	{1.29904761904762,	120	,10},
	{1.31904761904762,	120	,10},
	{1.33904761904762,	120	,10},
	{1.35904761904762,	120	,10},
	{1.37904761904762,	120	,10},
	{1.39904761904762,	120	,10},
	{1.41904761904762,	120	,10},
	{1.43904761904762,	120	,10},
	{1.45904761904762,	120	,10},
	{1.47904761904762,	120	,10},
	{1.49904761904762,	120	,10},
	{1.51904761904762,	120	,10},
	{1.53904761904762,	120	,10},
	{1.55904761904762,	120	,10},
	{1.57904761904762,	120	,10},
	{1.59904761904762,	120	,10},
	{1.61904761904762,	120	,10},
	{1.63904761904762,	120	,10},
	{1.65904761904762,	120	,10},
	{1.67904761904762,	120	,10},
	{1.69904761904762,	120	,10},
	{1.71904761904762,	120	,10},
	{1.73904761904762,	120	,10},
	{1.75904761904762,	120	,10},
	{1.77904761904762,	120	,10},
	{1.79904761904762,	120	,10},
	{1.81904761904762,	120	,10},
	{1.83904761904762,	120	,10},
	{1.85904761904762,	120	,10},
	{1.87904761904762,	120	,10},
	{1.89904761904762,	120	,10},
	{1.91904761904762,	120	,10},
	{1.93904761904762,	120	,10},
	{1.95904761904762,	120	,10},
	{1.97904761904762,	120	,10},
	{1.99904761904762,	120	,10},
	{2.01904761904762,	120	,10},
	{2.03904761904762,	120	,10},
	{2.05904761904762,	120	,10},
	{2.07904761904762,	120	,10},
	{2.09904761904762,	120	,10},
	{2.11904761904762,	120	,10},
	{2.13904761904762,	120	,10},
	{2.15904761904762,	120	,10},
	{2.17904761904762,	120	,10},
	{2.19904761904762,	120	,10},
	{2.21904761904762,	120	,10},
	{2.23904761904762,	120	,10},
	{2.25904761904762,	120	,10},
	{2.27904761904762,	120	,10},
	{2.29904761904762,	120	,10},
	{2.31904761904762,	120	,10},
	{2.33904761904762,	120	,10},
	{2.35904761904762,	120	,10},
	{2.37904761904762,	120	,10},
	{2.39904761904762,	120	,10},
	{2.41904761904762,	120	,10},
	{2.43904761904762,	120	,10},
	{2.45904761904762,	120	,10},
	{2.47904761904762,	120	,10},
	{2.49904761904762,	120	,10},
	{2.51904761904762,	120	,10},
	{2.53904761904762,	120	,10},
	{2.55904761904762,	120	,10},
	{2.57904761904762,	120	,10},
	{2.59904761904762,	120	,10},
	{2.61904761904762,	120	,10},
	{2.63904761904762,	120	,10},
	{2.65904761904762,	120	,10},
	{2.67904761904762,	120	,10},
	{2.69904761904762,	120	,10},
	{2.71904761904762,	120	,10},
	{2.73904761904762,	120	,10},
	{2.75904761904762,	120	,10},
	{2.77904761904762,	120	,10},
	{2.79904761904762,	120	,10},
	{2.81904761904762,	120	,10},
	{2.83904761904762,	120	,10},
	{2.85904761904762,	120	,10},
	{2.87904761904762,	120	,10},
	{2.89904761904762,	120	,10},
	{2.91904761904762,	120	,10},
	{2.93904761904762,	120	,10},
	{2.95904761904762,	120	,10},
	{2.97904761904762,	120	,10},
	{2.99904761904762,	120	,10},
	{3.01904761904762,	120	,10},
	{3.03904761904762,	120	,10},
	{3.05904761904762,	120	,10},
	{3.07904761904762,	120	,10},
	{3.09904761904762,	120	,10},
	{3.11904761904762,	120	,10},
	{3.13904761904762,	120	,10},
	{3.15904761904762,	120	,10},
	{3.17904761904762,	120	,10},
	{3.19904761904762,	120	,10},
	{3.21904761904762,	120	,10},
	{3.23904761904762,	120	,10},
	{3.25904761904762,	120	,10},
	{3.27904761904762,	120	,10},
	{3.29904761904762,	120	,10},
	{3.31904761904762,	120	,10},
	{3.33904761904762,	120	,10},
	{3.35904761904762,	120	,10},
	{3.37904761904762,	120	,10},
	{3.39904761904762,	120	,10},
	{3.41904761904762,	120	,10},
	{3.43904761904762,	120	,10},
	{3.45904761904762,	120	,10},
	{3.47904761904762,	120	,10},
	{3.49904761904762,	120	,10},
	{3.51904761904762,	120	,10},
	{3.53904761904762,	120	,10},
	{3.55904761904762,	120	,10},
	{3.57904761904762,	120	,10},
	{3.59904761904762,	120	,10},
	{3.61904761904762,	120	,10},
	{3.63904761904762,	120	,10},
	{3.65904761904762,	120	,10},
	{3.67904761904762,	120	,10},
	{3.69904761904762,	120	,10},
	{3.71904761904762,	120	,10},
	{3.73904761904762,	120	,10},
	{3.75904761904762,	120	,10},
	{3.77904761904762,	120	,10},
	{3.79904761904762,	120	,10},
	{3.81904761904762,	120	,10},
	{3.8390380952381,	119.8857143	,10},
	{3.85900476190476,	119.7142857	,10},
	{3.8789380952381,	119.4857143	,10},
	{3.89882857142857,	119.2	,10},
	{3.91866666666667,	118.8571429	,10},
	{3.93844285714286,	118.4571429	,10},
	{3.95814761904762,	118	,10},
	{3.97777142857143,	117.4857143	,10},
	{3.99730476190476,	116.9142857	,10},
	{4.0167380952381,	116.2857143	,10},
	{4.03606190476191,	115.6	,10},
	{4.05526666666667,	114.8571429	,10},
	{4.07434285714286,	114.0571429	,10},
	{4.09328095238096,	113.2	,10},
	{4.11207142857143,	112.2857143	,10},
	{4.13070476190477,	111.3142857	,10},
	{4.14917142857143,	110.2857143	,10},
	{4.16746190476191,	109.2	,10},
	{4.18556666666667,	108.0571429	,10},
	{4.20347619047619,	106.8571429	,10},
	{4.22118571428572,	105.6571429	,10},
	{4.23869523809524,	104.4571429	,10},
	{4.25600476190477,	103.2571429	,10},
	{4.27311428571429,	102.0571429	,10},
	{4.29002380952381,	100.8571429	,10},
	{4.30673333333334,	99.65714286	,10},
	{4.32324285714286,	98.45714286	,10},
	{4.33955238095238,	97.25714286	,10},
	{4.35566190476191,	96.05714286	,10},
	{4.37157142857143,	94.85714286	,10},
	{4.38728095238096,	93.65714286	,10},
	{4.40279047619048,	92.45714286	,10},
	{4.4181,	91.25714286	,10},
	{4.43320952380953,	90.05714286	,10},
	{4.44811904761905,	88.85714286	,10},
	{4.46282857142857,	87.65714286	,10},
	{4.4773380952381,	86.45714286	,10},
	{4.49164761904762,	85.25714286	,10},
	{4.50575714285715,	84.05714286	,10},
	{4.51966666666667,	82.85714286	,10},
	{4.53337619047619,	81.65714286	,10},
	{4.54688571428572,	80.45714286	,10},
	{4.56019523809524,	79.25714286	,10},
	{4.57330476190477,	78.05714286	,10},
	{4.58621428571429,	76.85714286	,10},
	{4.59892380952381,	75.65714286	,10},
	{4.61143333333334,	74.45714286	,10},
	{4.62374285714286,	73.25714286	,10},
	{4.63585238095238,	72.05714286	,10},
	{4.64776190476191,	70.85714286	,10},
	{4.65947142857143,	69.65714286	,10},
	{4.67098095238096,	68.45714286	,10},
	{4.68229047619048,	67.25714286	,10},
	{4.6934,	66.05714286	,10},
	{4.70430952380953,	64.85714286	,10},
	{4.71501904761905,	63.65714286	,10},
	{4.72552857142857,	62.45714286	,10},
	{4.7358380952381,	61.25714286	,10},
	{4.74594761904762,	60.05714286	,10},
	{4.75585714285715,	58.85714286	,10},
	{4.76556666666667,	57.65714286	,10},
	{4.77507619047619,	56.45714286	,10},
	{4.78438571428572,	55.25714286	,10},
	{4.79349523809524,	54.05714286	,10},
	{4.80240476190477,	52.85714286	,10},
	{4.81111428571429,	51.65714286	,10},
	{4.81962380952381,	50.45714286	,10},
	{4.82793333333334,	49.25714286	,10},
	{4.83604285714286,	48.05714286	,10},
	{4.84395238095238,	46.85714286	,10},
	{4.85166190476191,	45.65714286	,10},
	{4.85917142857143,	44.45714286	,10},
	{4.86648095238096,	43.25714286	,10},
	{4.87359047619048,	42.05714286	,10},
	{4.8805,	40.85714286	,10},
	{4.88720952380953,	39.65714286	,10},
	{4.89371904761905,	38.45714286	,10},
	{4.90002857142857,	37.25714286	,10},
	{4.9061380952381,	36.05714286	,10},
	{4.91204761904762,	34.85714286	,10},
	{4.91775714285715,	33.65714286	,10},
	{4.92326666666667,	32.45714286	,10},
	{4.92857619047619,	31.25714286	,10},
	{4.93368571428572,	30.05714286	,10},
	{4.93859523809524,	28.85714286	,10},
	{4.94330476190477,	27.65714286	,10},
	{4.94781428571429,	26.45714286	,10},
	{4.95212380952381,	25.25714286	,10},
	{4.95623333333334,	24.05714286	,10},
	{4.96014285714286,	22.85714286	,10},
	{4.96385238095238,	21.65714286	,10},
	{4.96736190476191,	20.45714286	,10},
	{4.97067142857143,	19.25714286	,10},
	{4.97378095238096,	18.05714286	,10},
	{4.97669047619048,	16.85714286	,10},
	{4.9794,	15.65714286	,10},
	{4.98190952380953,	14.45714286	,10},
	{4.98421904761905,	13.25714286	,10},
	{4.98632857142857,	12.05714286	,10},
	{4.9882380952381,	10.85714286	,10},
	{4.98995714285715,	9.771428571	,10},
	{4.9915,	8.742857143	,10},
	{4.99287619047619,	7.771428571	,10},
	{4.99409523809524,	6.857142857	,10},
	{4.99516666666667,	6	,10},
	{4.9961,	5.2	,10},
	{4.99690476190476,	4.457142857	,10},
	{4.99759047619048,	3.771428571	,10},
	{4.99816666666667,	3.142857143	,10},
	{4.99864285714286,	2.571428571	,10},
	{4.99902857142857,	2.057142857	,10},
	{4.99933333333334,	1.6	,10},
	{4.99956666666667,	1.2	,10},
	{4.9997380952381,	0.857142857	,10},
	{4.99985714285715,	0.571428571	,10},
	{4.99993333333334,	0.342857143	,10},
	{4.99997619047619,	0.171428571	,10},
	{4.99999523809524,	0.057142857	,10},
	{5,	0	,10}};
			

	
	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		
		L1.setInverted(true);
		L2.setInverted(true);
		L3.setInverted(true);
		
		L1.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
		L2.changeControlMode(CANTalon.TalonControlMode.Follower);
		L3.changeControlMode(CANTalon.TalonControlMode.Follower);
		R1.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
		R2.changeControlMode(CANTalon.TalonControlMode.Follower);
		R3.changeControlMode(CANTalon.TalonControlMode.Follower);
		
		L2.set(L1.getDeviceID());
		L3.set(L1.getDeviceID());
		R2.set(R1.getDeviceID());
		R3.set(R1.getDeviceID());
		
		L1.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		R1.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		
		L1.setAllowableClosedLoopErr(0);		// F: 0.97
		R1.setAllowableClosedLoopErr(0);		// 30, 35, 35, 40
												// F: 0.975
		L1.reverseSensor(false);				// 30, 30, 35, 40
												// F: 0.98
		L1.configEncoderCodesPerRev(250);		// 30, 30, 30, 40
		R1.configEncoderCodesPerRev(250);
		
		// At 200 slammed forward and backward no drop outs and driving responsive
		L1.setVoltageRampRate(6400);
		R1.setVoltageRampRate(6400);

	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		
		System.out.println("Motion Profile");
		
		L1.changeControlMode(TalonControlMode.MotionProfile);
		L2.changeControlMode(TalonControlMode.Follower);
		L3.changeControlMode(TalonControlMode.Follower);
		R1.changeControlMode(TalonControlMode.MotionProfile);
		R2.changeControlMode(TalonControlMode.Follower);
		R3.changeControlMode(TalonControlMode.Follower);
		
		L1.set(0);
		R1.set(0);

		TrajectoryPoint point = new TrajectoryPoint();
		
		for(int i = 0; i < kNumPoints; ++i) {
			point.position = Points[i][0];
			point.velocity = Points[i][1];
			point.timeDurMs = (int) Points[i][2];
			point.profileSlotSelect = 0;
			point.velocityOnly = false;
			
			point.zeroPos = false;
			if(i == 0) {
				point.zeroPos = true;
			}
			
			point.isLastPoint = false;
			if((i + 1) == kNumPoints) {
				point.isLastPoint = true;
			}
			
			L1.pushMotionProfileTrajectory(point);
			R1.pushMotionProfileTrajectory(point);
			
			System.out.println(i);
		}
		
		L1.set(1);
		R1.set(1);
		
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		L1.set(1);
		L1.set(1);
		
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		
		// Intake
		if (stick.getRawButton(5) || stick.getRawButton(6) ) {
			intakeMotor.set(1);
		}
		else if (stick.getRawButton(1)) {
			intakeMotor.set(-1);
		}
		else {
			intakeMotor.set(0);
		}
		
		// Adjusting joystick sensitivity
		double xValue = Math.pow(stick.getRawAxis(4), 3);
		double yValue = Math.pow(stick.getRawAxis(1) * -1.0, 3);
		
		// Deadband
		if (Math.abs(xValue) < 0.1) {
			xValue = 0;
		}
		
		if (Math.abs(yValue) < 0.1) {
			yValue = 0;
		}
		
		// Left drive & right drive
		/*double leftDrive = (yValue + xValue) * 600;
		double rightDrive = (yValue - xValue) * 600;
		
		if (Math.abs(leftDrive) > 600) {
			leftDrive = 600 * Math.signum(leftDrive);
		}
		
		if (Math.abs(rightDrive) > 600) {
			rightDrive = 600 * Math.signum(rightDrive);
		}*/
		
		// Setting talons
		//L1.set(leftDrive);
		//R1.set(rightDrive);
		L1.set(yValue + xValue);
		R1.set(yValue - xValue);
		
		/*if(stick.getRawButton(1) == true) {
			L1.set(0.25 * 600);
			R1.set(0.25 * 600);
		}
		else if(stick.getRawButton(2) == true) {
			L1.set(0.5 * 600);
			R1.set(0.5 * 600);
		}
		else if(stick.getRawButton(3) == true) {
			L1.set(0.75 * 600);
			R1.set(0.75 * 600);
		}
		else if(stick.getRawButton(4) == true) {
			L1.set(1.0 * 600);
			R1.set(1.0 * 600);
		}
		else {
			L1.set(0);
			R1.set(0);
		}*/
		
		double leftSpeed = L1.getSpeed();
		double rightSpeed = R1.getSpeed();
		System.out.println("Left Speed: " + leftSpeed);
		System.out.println("Right Speed: " + rightSpeed);
		
		double leftEncoder = L1.getEncVelocity();
		double rightEncoder = R1.getEncVelocity();
		//System.out.println("Left Encoder Value: " + leftEncoder);
		//System.out.println("Right Encoder Value: " + rightEncoder);
		
		/* Joystick values to gyro values
		double angleGyro = gyro.getAngle()%360;
		System.out.println(angleGyro);
		
		double angleStick = Math.toDegrees(Math.atan2((stick.getRawAxis(1)), (stick.getRawAxis(0))));
		System.out.println(angleStick);*/

		Timer.delay(0.005);
	}

	public double handleDeadband(double val, double deadband) {
		return (Math.abs(val) > Math.abs(deadband)) ? val : 0.0;
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
}

